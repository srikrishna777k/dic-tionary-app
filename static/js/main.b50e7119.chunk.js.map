{"version":3,"sources":["content/languages.js","components/Header/Header.js","components/meaning/meaning.js","App.js","index.js"],"names":["languages","value","label","Header","language","setLanguage","input","setInput","lightmode","darkTheme","createTheme","palette","primary","main","type","className","noValidate","autoComplete","ThemeProvider","theme","TextField","onChange","e","target","select","lang","map","MenuItem","Meaning","definition","src","phonetics","audio","controls","meanings","mean","definitions","def","style","backgroundColor","color","example","synonyms","syn","App","SwitchTheme","withStyles","switchBase","orange","checked","track","Switch","useState","setDefinition","setMode","apicall","a","get","data","useEffect","Headerprops","Meaningprops","transition","Container","maxWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b50e7119.chunk.js","sourcesContent":["const languages = [\r\n  { value: 'English', label: 'en' },\r\n  { value: 'Hindi', label: 'hi' },\r\n  { value: 'Spanish', label: 'es' },\r\n  { value: 'French', label: 'fr' },\r\n  { value: 'Japanese', label: 'ja' },\r\n  { value: 'Russian', label: 'ru' },\r\n  { value: 'German', label: 'de' },\r\n  { value: 'Italian', label: 'it' },\r\n  { value: 'Korean', label: 'ko' },\r\n  { value: 'Brazilian Portuguese', label: 'pt-BR' },\r\n  { value: 'Arabic', label: 'ar' },\r\n  { value: 'Turkish', label: 'tr' },\r\n]\r\n\r\nexport default languages\r\n","import {\r\n  createTheme,\r\n  MenuItem,\r\n  TextField,\r\n  ThemeProvider,\r\n} from '@material-ui/core'\r\nimport React from 'react'\r\nimport './Header.css'\r\nimport languages from '../../content/languages'\r\n\r\nconst Header = ({ language, setLanguage, input, setInput, lightmode }) => {\r\n  const darkTheme = createTheme({\r\n    palette: {\r\n      primary: {\r\n        main: lightmode ? '#000' : '#fff',\r\n      },\r\n      type: lightmode ? 'light' : 'dark',\r\n    },\r\n  })\r\n  const handleChange = (lang) => {\r\n    setLanguage(lang)\r\n    setInput('')\r\n  }\r\n  return (\r\n    <div className='header'>\r\n      <span className='title'>{input ? input : 'Word House'}</span>\r\n      <form noValidate autoComplete='off' className='inputs'>\r\n        <ThemeProvider theme={darkTheme}>\r\n          <TextField\r\n            label='Input'\r\n            className='word'\r\n            value={input}\r\n            onChange={(e) => {\r\n              setInput(e.target.value)\r\n            }}\r\n          />\r\n          <TextField\r\n            select\r\n            label='Language'\r\n            className='select'\r\n            value={language}\r\n            onChange={(e) => {\r\n              handleChange(e.target.value)\r\n            }}\r\n          >\r\n            {languages.map((lang) => (\r\n              <MenuItem key={lang.label} value={lang.label}>\r\n                {lang.value}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n        </ThemeProvider>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport ReactAudioPlayer from 'react-audio-player'\r\n\r\nimport './meaning.css'\r\n\r\nconst Meaning = ({ definition, input, language, lightmode }) => {\r\n  return (\r\n    <div className='meanings scroll'>\r\n      {input && definition[0] && language === 'en' && (\r\n        <ReactAudioPlayer\r\n          className='audio'\r\n          src={definition[0].phonetics[0] && definition[0].phonetics[0].audio}\r\n          controls\r\n        />\r\n      )}\r\n      {!input ? (\r\n        <div className='enter'>Enter something</div>\r\n      ) : (\r\n        definition.map((type) => {\r\n          return type.meanings.map((mean) => {\r\n            return mean.definitions.map((def) => {\r\n              return (\r\n                <div\r\n                  className='def'\r\n                  style={{\r\n                    backgroundColor: lightmode ? '#28303d' : 'white',\r\n                    color: lightmode ? 'white' : 'black',\r\n                  }}\r\n                >\r\n                  <b className='type'>{def.definition}</b>\r\n                  <hr className='break' />\r\n                  {def.example && (\r\n                    <span className='type'>\r\n                      <b>Example : </b>\r\n                      {def.example}\r\n                    </span>\r\n                  )}\r\n                  {def.synonyms == true && (\r\n                    <span>\r\n                      <b>Synonyms : </b>\r\n                      {def.synonyms.map((syn) => `${syn}, `)}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              )\r\n            })\r\n          })\r\n        })\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Meaning\r\n","import { Container, withStyles, Switch } from '@material-ui/core'\nimport { get } from 'axios'\nimport { useEffect, useState } from 'react'\nimport './App.css'\nimport Header from './components/Header/Header'\nimport Meaning from './components/meaning/meaning'\nimport { orange } from '@material-ui/core/colors'\n\nfunction App() {\n  const SwitchTheme = withStyles({\n    switchBase: {\n      color: orange[300],\n      '&$checked': {\n        color: orange[500],\n      },\n      '&$checked + $track': {\n        backgroundColor: orange[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch)\n\n  const [input, setInput] = useState('')\n  const [definition, setDefinition] = useState([])\n  const [language, setLanguage] = useState('en')\n  const [lightmode, setMode] = useState(0)\n  const apicall = async () => {\n    try {\n      const { data } = await get(\n        `https://api.dictionaryapi.dev/api/v2/entries/${language}/${input}`\n      )\n      setDefinition(data)\n    } catch (error) {\n      throw error\n    }\n  }\n  useEffect(() => {\n    apicall()\n  }, [input, language])\n\n  const Headerprops = { language, setLanguage, input, setInput, lightmode }\n  const Meaningprops = { definition, input, language, lightmode }\n\n  return (\n    <div\n      className='App'\n      style={{\n        backgroundColor: lightmode ? '#fff' : '#28303d',\n        color: lightmode ? 'black' : 'white',\n        transition: 'all 0.5s linear',\n      }}\n    >\n      <Container maxWidth='md' className='container'>\n        <div className='theme'>\n          <span>{lightmode ? 'Dark' : 'Light'} theme</span>\n          <SwitchTheme\n            onChange={() => setMode(!lightmode)}\n            checked={lightmode}\n          />\n        </div>\n        <Header {...Headerprops} />\n        <Meaning {...Meaningprops} />\n      </Container>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}